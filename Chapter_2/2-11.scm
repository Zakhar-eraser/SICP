#lang sicp
(define (pos? x)
  (> x 0))

(define (mul-interval x y)
(let ((x-low (lower-bound x))
      (x-up (upper-bound x))
      (y-low (lower-bound y))
      (y-up (upper-bound y)))
  (cond ((and (pos? x-low) (pos? x-up) (pos? y-low) (pos? y-up))
         (make-interval (* x-low y-low) (* x-up y-up)))
        ((and (not (pos? x-low)) (not (pos? x-up)) (not (pos? y-low)) (not (pos? y-up)))
         (make-interval (* x-up y-up) (* x-low y-low)))
        ((and (not (pos? x-low)) (not (pos? x-up)) (pos? y-low) (pos? y-up))
         (make-interval (* x-low y-up) (* x-up y-low)))
        ((and (pos? x-low) (pos? x-up) (not (pos? y-low)) (not (pos? y-up)))
         (make-interval (* x-up y-low) (* x-low y-up)))
        ((and (not (pos? x-low)) (pos? x-up) (pos? y-low) (pos? y-up))
         (make-interval (* x-low y-up) (* x-up y-up)))
        ((and (pos? x-low) (pos? x-up) (not (pos? y-low)) (pos? y-up))
         (make-interval (* x-up y-low) (* x-up y-up)))
        ((and (not (pos? x-low)) (pos? x-up) (not (pos? y-low)) (not (pos? y-up)))
         (make-interval (* x-up y-low) (* x-low y-low)))
        ((and (not (pos? x-low)) (not (pos? x-up)) (not (pos? y-low)) (pos? y-up))
         (make-interval (* x-low y-up) (* x-low y-low)))
        (else (let ((lu (* x-low y-up))
                    (ul (* x-up y-low))
                    (ll (* x-low y-low))
                    (uu (* x-up y-up)))
                (make-interval (min lu ul) (max ll uu)))))))

(define (make-interval a b) (cons a b))

(define (lower-bound x)
  (min (car x) (cdr x)))

(define (upper-bound x)
  (max (car x) (cdr x)))