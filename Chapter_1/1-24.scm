#lang sicp
(define (prime3-on-interval a b)
  (define (divides? x y) (= (remainder x y) 0))
  (define (square x) (* x x))
  (define (prime-test n times)
    (define (ferma? base)
    (define (ferma-once counter)
      (cond ((= counter 0) 1)
            ((divides? counter 2) (remainder (square (ferma-once (/ counter 2))) n))
            (else (remainder (* (ferma-once (dec counter)) base) n)))
      )
    (= (ferma-once n) base)
    )
  (define (try counter)
    (cond ((= counter times) true)
          ((ferma? (inc (random (dec n)))) (try (inc counter)))
          (else false))
    )
  (try 0)
    )
  (define (print-iter num counter time)
    (cond ((or (= counter 3) (> num b)) (display "end"))
          ((prime-test num 10)
           (display num)
           (display " ")
           (display (- (runtime) time))
           (newline)
           (print-iter (+ num 2) (inc counter) (runtime)))
          (else (print-iter (+ num 2) counter (runtime))))
    )
  (if (divides? a 2) (print-iter (inc a) 0 (runtime)) (print-iter a 0 (runtime)))
  )