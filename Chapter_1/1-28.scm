#lang sicp
(define (full-ferma n times)
  (define (square x)
    (* x x)
    )
  (define (ferma-test base counter)
    (define (trivial-square-checker x rem)
    (cond ((or (= x 1) (= x (dec n))) 1)
          ((= rem 1) 0)
          (else rem))
    )
    (define (remainder-or-trivial x) (trivial-square-checker x (remainder (square x) n)))
    (cond ((= counter 0) 1)
          ((= (remainder counter 2) 0) (remainder-or-trivial (ferma-test base (/ counter 2))))
          (else (remainder (* (ferma-test base (dec counter)) base) n)))
    )
  (define (try counter)
    (cond ((= counter times) (display "Prime"))
          ((= (ferma-test (inc (random (dec n))) (dec n)) 1) (try (inc counter)))
          (else (display "Not Prime")))
    )
  (try 0)
  )