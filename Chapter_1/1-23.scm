#lang sicp
(define (prime3-on-interval a b)
  (define (divides? x y) (= (remainder x y) 0))
  (define (next x) (if (= x 2) 3 (+ x 2)))
  (define (prime-test x)
    (define (prime-test-iter counter)
      (cond ((> (* counter counter) x) true)
            ((divides? x counter) false)
            (else (prime-test-iter (next counter)))
            )
      )
    (prime-test-iter 2)
    )
  (define (print-iter num counter time)
    (cond ((or (= counter 3) (> num b)) (display "end"))
          ((prime-test num)
           (display num)
           (display " ")
           (display (- (runtime) time))
           (newline)
           (print-iter (+ num 2) (inc counter) (runtime)))
          (else (print-iter (+ num 2) counter (runtime))))
    )
  (if (divides? a 2) (print-iter (inc a) 0 (runtime)) (print-iter a 0 (runtime)))
  )